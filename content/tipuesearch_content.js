var tipuesearch = {"pages": [{'title': '40823128', 'text': '\n \n', 'tags': '', 'url': '40823128.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n', 'tags': '', 'url': 'Develop.html'}, {'title': '課程內容', 'text': '', 'tags': '', 'url': '課程內容.html'}, {'title': 'W1', 'text': '1.利用大一所學使用cmsimde建立網站 \n 2.下載fall2020_cp.7z壓縮檔，並解壓縮至cad2020資料夾 \n 3.搜尋git windows下載64位元，解壓縮並放入已建立的PortableGit資料夾中 \n 4.將start放入小白框中修改以下圖框所示路徑 \n \n 5.設定gitconfig，並存入home資料夾中，儲存後重新啟動start \n 6.到Github建立名稱為cad2020的新倉儲(以下圖所示) \n \n 7.git clone新倉儲的網址，clone後至小黑框git submodule add \n 8.複製資料夾cmsimde中up_dir資料夾內檔案至cad2020中(以下圖所示) \n   \n 9.下載pip install flask flask_cors bs4 markdown pelican leo \n 10.進入cmsimde資料夾中，將wsgi.py放入小白框tools go複製下圖螢光標註網址並搜尋開啟動態網頁 \n \n 11.輸入密碼進入 \n 12.開啟小黑框push所有東西步驟依照以下順序 \n (1)Y:\\cd tmp \n (2)Y:\\tmp>cd cad2020 \n (3)Y:\\tmp\\cad2020>git add. \n (4)Y:\\tmp\\cad2020>git commit -m "網站建立" \n (5)Y:\\tmp\\cad2020>git push \n (6)輸入學號、密碼 \n (7)網站建立完成 \n', 'tags': '', 'url': 'W1.html'}, {'title': 'HW1', 'text': '各零件體積比較表 \n 使用Onshap與Inventor \n \n \n \n \n \n \n', 'tags': '', 'url': 'HW1.html'}, {'title': 'W2', 'text': '課程筆記 \n \n', 'tags': '', 'url': 'W2.html'}, {'title': 'HW2', 'text': 'Inventor版本類型 \n \n Inventor授權類型 \n \n', 'tags': '', 'url': 'HW2.html'}, {'title': 'W3', 'text': '', 'tags': '', 'url': 'W3.html'}, {'title': 'W4', 'text': 'wink3 \n 1.下載Wink3至隨身碟 \n 2.介紹Wink3如何使用及功能 \n 3.Wink與ShareX相同由FFmpeg執行 \n \n', 'tags': '', 'url': 'W4.html'}, {'title': 'HW4', 'text': 'Wink操作 \n', 'tags': '', 'url': 'HW4.html'}, {'title': 'W5', 'text': '何謂API \n 在電腦程式中設計，它屬於應用程式介面中是人與機械，物品，軟體間的橋樑 \n \n \n', 'tags': '', 'url': 'W5.html'}, {'title': 'W6', 'text': '如何使用API控制solidworks與inventor繪製模型，並同時將各模型之體積與圖片匯入html檔，使其能在網頁中瀏覽各模型變化。 \n \n', 'tags': '', 'url': 'W6.html'}, {'title': 'W7', 'text': '利用SciTE編輯器類解譯ANSI C程式並建立C環境 \n 下載cad2020_w7_tcc_gnuplot.7z解壓縮至隨身碟資料夾 \n \n 將gnuplot,tcc資料夾way-microhei.ttc文字檔剪下至data資料夾與tmp同層 \n \n 將start.bat丟入小白框修改(新增)紅框內之路徑 \n \n 使用下載的cad2020_w7_tcc_gnuplot.7z裡的wscite資料夾將cpp.properties批次檔案複製出 \n 將下載的cpp.properties覆蓋至cad2020資料夾內部原有的cpp.properties批次檔 \n \n 即可執行以下程式 \n \n \n 執行後跑出之曲線 \n \n \n', 'tags': '', 'url': 'W7.html'}, {'title': 'w8', 'text': '下載 Pyslvs_UI  ，用參數繪製圖檔 \n Pyslvs 使用手冊 \n Pyslvs連桿機構應用 \n \n \n', 'tags': '', 'url': 'w8.html'}, {'title': 'w9', 'text': '期中考週 \n \n', 'tags': '', 'url': 'w9.html'}, {'title': 'W10', 'text': '下載 coppeliasim ，各組設計出一機構，可利用Solidworks及Inventor先繪製機構圖，再放至coppeliasim模擬。 \n \n 原始下載的資料夾內缺少vcruntime140_1檔案，須從隨身碟內的Python38資料夾內複製vcruntime140_1(如圖下)，才能順利啟動coppeliasim系統。 \n \n', 'tags': '', 'url': 'W10.html'}, {'title': 'W11', 'text': '1.介紹如何使用非同步的方式整理cmsimde網頁，使組員間可在非同步的情況下進行網頁推送。 \n 2.各組繼續討論要設計何種機構，並匯入coppeliasim測試及修改。 \n', 'tags': '', 'url': 'W11.html'}, {'title': 'W12', 'text': 'Coppeliasim使用者說明，及放置程式內模擬。 \n 1.利用Solidworks,Inventor,等各3D繪圖軟體繪製機構圖,並將檔案存成STL檔並匯入Coppeliasim中,所有檔案以英文檔名。 \n 2.繪製機構時以coppeliasim中的軸向為基準,Z軸向上避免匯入時還需要調軸向。 \n 3.使用Edit->Grouping/Merging->Divide selected shapes 將匯入的STL檔案做零件分割。 \n 4.使用Add->joint->Revolute讓物件做旋轉。 \n 5.必須開啟動態屬性對話框中的選項才能使物件做旋轉或移動或讓物件之間作接觸。 \n', 'tags': '', 'url': 'W12.html'}, {'title': 'HW12', 'text': 'Inventor零組件組合問題 \n 下圖為圓柱與球棒若畫在同一草圖並建立零件，在模擬時中間軸會選在組合零件的中間而不是圓柱中間，進而無法達成所要的運動，球棒與圓柱需分開來畫成不同組件再將兩組件組合。 \n \n 下圖為各零件分開後零件圖(球棒) \n \n 下圖為圓柱，需挖出與球棒一端相同尺寸的孔來配合。 \n \n 個零件配合後再至coppeliasim模擬。 \n \n \n', 'tags': '', 'url': 'HW12.html'}, {'title': 'W13', 'text': '介紹如何使用NX12-API，解說伺服器如何放置，需以何種方式進行非同步執行網站，目前是將伺服器放置於電腦輔助設計實習室中。 \n', 'tags': '', 'url': 'W13.html'}, {'title': 'W15', 'text': '瞭解coppeliasim基本用法(匯入檔案>軸向控制>位置移動>軸關節的放置與使用)。 \n 持續討論小組報告及修改問題。 \n', 'tags': '', 'url': 'W15.html'}, {'title': 'CoppeliaSim翻譯', 'text': '', 'tags': '', 'url': 'CoppeliaSim翻譯.html'}, {'title': 'Simulation Setting(模擬設定)', 'text': '\n', 'tags': '', 'url': 'Simulation Setting(模擬設定).html'}, {'title': 'Scene Object Properties 場景對象屬性', 'text': 'Shape \n \n Common \n \n', 'tags': '', 'url': 'Scene Object Properties 場景對象屬性.html'}, {'title': 'Calculation Modules 模組計算', 'text': 'collision 碰撞檢測: \n \n', 'tags': '', 'url': 'Calculation Modules 模組計算.html'}, {'title': 'Meeting', 'text': 'W11 \n \n W12 \n \n W17 \n', 'tags': '', 'url': 'Meeting.html'}]};